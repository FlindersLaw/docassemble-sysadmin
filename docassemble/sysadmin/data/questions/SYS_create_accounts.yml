###
### IMPORTANT
### Code related to multiple privileges is not tested.  Proceed with caution!!


# Creates accounts for students studying LLAW3301 Law in a Digital Age
# - Processes CSV export from FLO that contains all active students.  
# - Creates user accounts using emails constructed as FAN@flinders.edu.au.
# - user accounts created with random passwords
# - Populates name details into DA account
# - emails each user and attaches PDF containing username, password and 
#   access instructions.
---
# Use this to create password.
imports:
  - os
  - random
  - string
---
objects:
  - the_sender: Individual
  - email_from: Individual
  - accounts_import: DAList.using(auto_gather=False, gathered=True)
  - accounts_created: DAList.using(auto_gather=False, gathered=True)
---
# Need these python modules
include:
  - SYS_create_accounts_questions.yml
---
# Change this to reflect the current course 'privilege' defined in
# Docassemble
mandatory: True
code: |
  MJFtopic_priv = 'llaw3301_2020_s1'
---
# Code blocks to set up password
mandatory: True
code: |
  # Initialise randomness
  random.seed = (os.urandom(1024))
---
# Length of the password
code: |
  # Length of the password
  MJFpwlength = 13
---
# Characters from which to make password
code: |
  MJFpwchars = string.ascii_letters + string.digits + '!@#$%^&*()'
---
# Displays an initial confirmation screen.
mandatory: True
question: User Account creator
subquestion: |
  This app creates accounts on this Docassemble system.  It is designed to
  read input from user data exported from FLO.  To export the data do the 
  following:
  
  - instructions to go here
  
  You must have this data ready to upload before you run this application.  After
  you upload the file there will be no further interaction with this program.  
  Everything will happen automagically.
  
  For your information, a template PDF is displayed below.  If you are not
  satisfied with the PDF **do not run this program**.  You will need to edit
  the Word file in the `docassemble-sysadmin` package, re-upload your new Word
  file and then re-run the program.
  
  Once you have the data ready click on Continue to create accounts.
buttons:
  - Continue: continue
  - Exit: exit
    url: https://docassemble.flinders.edu.au
---
# Reads the input file and calls csv to create a list of lists.
# I wanted to use the csv python module but I received pickle errors so 
# I dropped it and processed my CSV manually.
# UPDATE: also populates 'tried' key with False.  This key is used to
# establish whether we've attempted to create this user already or not and
# needs to be initialised.
mandatory: True
code: |
  # Read the data into a CSV object
  all_the_lines = csv_import.slurp()
  for line in all_the_lines.splitlines():
    elements = line.replace('"', '').split(',', maxsplit=4)
    if elements[0] == 'FAN':
      continue
 
    # Otherwise, we process.
    one_item = {}
    one_item['FAN'], one_item['first_name'], one_item['last_name'], one_item['email'], the_rest = elements
    # Find which seminar they are in
    # We assume the CSV always lists seminars as 'Seminar nn'
    for group in the_rest.split(','):
      if group.lower()[:7] == 'seminar':
        MJFseminar = 'seminar_' + group.lower()[8:]
        break
    one_item['seminar'] = MJFseminar
    accounts_import.append(one_item)
---
# Populate additional fields required for user account creation.  These are
# - password
# - access credentials ('privileges')
# - 'tried' flag
# 'tried' needs to be set to False.  It is set to true when an attempt to 
# create the account is performed.  
mandatory: True
code: |
  # Get the privilege before we start
  the_priv = MJFtopic_priv
  
  # And away we go!
  for element in accounts_import:
    element['password'] = ''.join(random.choice(MJFpwchars) for i in range(MJFpwlength))
    element['tried'] = False
    element['privileges'] = ['developer', the_priv, element['seminar'] ]
    element['email_status'] = False
---
mandatory: True
question: Accounts to be created
subquestion: |
  The following accounts will be created.  Press 'Continue' to create accounts
  
  ${accounts_table}
buttons:
  - Continue: continue
  - Restart: restart
  - Exit: exit
---
# Constructs the list of users to which emails will be sent
mandatory: True
code: |
  for row in accounts_import:
    if not row['tried']:
      # Construct additional information
      additional_information = {
        'first_name': row['first_name'],
        'last_name': row['last_name'],
        'timezone': 'Australia/Adelaide'
      }
      try:
        # Set the tried flag first.  If we get this far it means we've
        # made an attempt
        row['tried'] = True
        # and now do the dirty
        create_user(
          row['email'], row['password'],
          privileges=row['privileges'],
          info=additional_information)
        row['status'] = 'OK'
      except Exception as e:
        row['status'] = str(e)
---
# Send emails to users
mandatory: True
code: |
  for row in accounts_import:
    # Unsucccessful attempts are not sent emails
    if not row['tried']:
      continue
    
    # TODO: what if status is not an ID?  That would imply that
    # the account most likely exists already.
    if row['status'] != 'OK':
      continue
      
    # Now get down and dirty
    # Need to construct an Individual object to pass to send_email()
    MJFrecipient = Individual()
    MJFrecipient.name.first = row['first_name']
    MJFrecipient.name.last = row['last_name']
    MJFrecipient.email = row['email']
    MJFrecipient.password = row['password']
    row['email_status'] = send_email(
                            to=MJFrecipient, 
                            template=MJFemail_message,
                            attachments=[MJFattachment])
---
mandatory: True
question: Accounts Creation Status
subquestion: |
  The `status` column should display the user's email address if the account
  was created successfully
  
  ${accounts_created_table}
buttons:
  - Restart: restart
  - Exit: exit
---
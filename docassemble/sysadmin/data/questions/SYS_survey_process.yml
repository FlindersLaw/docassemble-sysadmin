# Processes the submitted survey preferences and allocates students
# to seminars.
#
# Logic flow goes something like this:
# - read all student data into a DAList
# - read all the project data into DAList
# - project data structure must record seminar the project is allocated to
#   and number of students allocated to it
# - 
# for each student in the list
# - choose a student at random
# - allocate preferences based on following:
#   - students can't be allocated to a project already  in another seminar
#   - students can't be allocated to a project that is full
#   - try to allocate first, second, third prefs
#   - if that fails (or if there are no prefs)
#     - construct a list of projects allocated to that seminar plus
#       projects not allocated to any seminar
#     - only add projects with available student spots to the list
#     - projects should not be over-allocated to a seminar.  We have
#       19 projects so no seminar should have more than 10 (don't
#       hard-code these numbers though - cater for different numbers
#       of projects and different numbers of seminars)
#     - allocate a student to a random project 
#     - allocate that project to that seminar
#
# Display the output as a table ie:
# Seminar | Project ID | Project Description | Members
#
# Off we go!!
---
include:
  - SYS_survey_constants.yml
---
imports:
  - random
---
# First we process all students who have submitted preferences
# and we attempt to place them in one of their preferred projects
mandatory: True
code: |
  for a_student in shuffled_students:
    # DA may run this loop more than one time.  Skip over
    # students already allocated
    if a_student['allocated']:
      continue
  
    # If the student isn't allocated to a seminar then we skip.  Students
    # allocated to a seminar have a 'seminar' value that begins with 'Seminar'
    # UPDATE 4 March 2021
    # We don't check seminars any more as all students are in a single seminar
    # if a_student['seminar'][:7] != MJFconstants.seminar_prefix:
    #   continue

    # Get the student's pref data
    # del so it's always reset
    a_prefs_entry = llaw3301_data.get(MJFconstants.survey_input_record + a_student['FAN'])

    # We don't process here if the student did not register preferences
    if a_prefs_entry is None:
      continue

    # Now fit students into their prefs
    for a_pref in a_prefs_entry['prefs']:
      if ( projects_dictionary[a_pref]['seminar'] == a_student['seminar'] or  projects_dictionary[a_pref]['seminar'] == '' ) and ( not a_student['allocated'] ):
      # if ( not a_student['allocated'] ):

        # Student can be added, but only if the max group size hasn't been
        # exceeded yet.
        if len(projects_dictionary[a_pref]['students']) < MJFconstants.max_group_size:
          # Now we're good to go.  The project can be (re-)assigned to this 
          # seminar and the student can be added
          projects_dictionary[a_pref]['seminar'] = a_student['seminar']
          projects_dictionary[a_pref]['students'].append(a_student['FAN'])
          a_student['allocated'] = True
          # Stop processing prefs once allocated
          break
  
  # That's it.  We still have a stack of students who either have no prefs
  # or did have prefs but could not be allocated to any of their preferred
  # seminars.  They are dealt with in the following mandatory block
---
# This block manages students who have not been allocated and who either
# did not allocate preferences or were not able to be assigned to their
# preferred project.
mandatory: True
code: |
  for a_student in shuffled_students:
    # DA may run this loop more than one time.  Skip over
    # students already allocated
    if a_student['allocated']:
      continue
  
    # If the student isn't allocated to a seminar then we skip.  Students
    # allocated to a seminar have a 'seminar' value that begins with 'Seminar'
    # if a_student['seminar'][:7] != MJFconstants.seminar_prefix:
    #   continue

    # Add student to a random project.
    # Find the first available project either unallocated or allocated to 
    # their seminar group and allocate them to it.  
    for a_project in shuffled_projects:
      project_id = a_project['Project Identifier']
      if ( projects_dictionary[project_id]['seminar'] == a_student['seminar'] or projects_dictionary[project_id]['seminar'] == '' ) and ( len(projects_dictionary[project_id]['students']) < MJFconstants.max_group_size ):
      # if len(projects_dictionary[project_id]['students']) < MJFconstants.max_group_size:
        # We have a project in the right seminar with vacancies so allocate
        # the student here
        projects_dictionary[project_id]['seminar'] = a_student['seminar']
        projects_dictionary[project_id]['students'].append(a_student['FAN'])
        a_student['allocated'] = True
        # Get out of the loop once we're allocated
        break
---
# Displays the table
mandatory: True
question: Project Allocation
subquestion: |
  TODO: Something descriptive to go here at some stage

  Project alloation by seminar:

  Seminar|No. Projects
  ---|---
  %for a_seminar in seminar_allocations:
  ${a_seminar} | ${str(seminar_allocations[a_seminar])}
  %endfor

  ${ project_allocation_table }
buttons:
  - Exit: exit
    url: https://docassemble.flinders.edu.au
  - Restart: Restart
attachment:
  - name: Allocation Table
    filename: allocation_table
    content: |
      # Student allocation Groups Prepared on ${today()}

      %for a_line in csv_table:
      ${a_line}
      %endfor
  
---
table: project_allocation_table
rows: current_projects_data
columns:
  - Project ID:
      row_item['Project Identifier']
  - Project Description:
      row_item['Project Description']
  - Allocated Seminar:
      projects_dictionary[row_item['Project Identifier']]['seminar']
  - Members: |
      pretty_preferences[row_item['Project Identifier']]  
---
# Get the current projects
code: |
  current_projects_data = llaw3301_data.get(MJFconstants.project_data)
---
# Get the current student data
code: |
  current_students_data = llaw3301_data.get(MJFconstants.student_data)
---
# Convert projects data into a dictionary - easier to access
# Each dictionary has the following in a sub-dictionary
# - the project description
# - the seminar to which the project is allocated (initialised to None)
# - a list of allocated students (initialised to [])
code: |
  projects_dictionary = {}
  for MJFitem in current_projects_data:
    item_key = MJFitem['Project Identifier']
    item_value = item_key + ': ' + MJFitem['Project Description'] + ' (' + MJFitem['Organisation'] + ')'
    projects_dictionary[item_key] = {
        'description' : item_value,
        'seminar'     : '',
        'students'    : []
      }
---
#Shuffles the list of students
code: |
  shuffled_students = random.sample(list(current_students_data), len(current_students_data))
  # Initialise all students to be unallocated
  for a_shuffled_student in shuffled_students:
    a_shuffled_student['allocated'] = False
---
# Shuffles the list of projects - for random allocation
code: |
  shuffled_projects = random.sample(list(current_projects_data), len(current_projects_data))
---
# Make a student dictionary - for printing student details
code: |
  students_dictionary = {}
  for MJFitem in current_students_data:
    prefs_record = llaw3301_data.get(MJFconstants.survey_input_record + MJFitem['FAN'])
    if prefs_record is None:
      prefs_data = 'No preferences'
    else:
      prefs_data = prefs_record['prefs']
    
    item_key = MJFitem['FAN']
    item_value = {
      'first_name': MJFitem['first_name'],
      'last_name' : MJFitem['last_name'],
      'seminar'   : MJFitem['seminar'],
      'allocated' : MJFitem['allocated'],
      'prefs'     : prefs_data
    }
    students_dictionary[item_key] = item_value
---
# So we can display the preference selections in a meaninful way we
# format the FANs in the prefs list to look beautiful using more
# information and HTML
code: |
  # We will store all the pretty preferences here
  pretty_preferences = {}
  for a_project in current_projects_data:
    # Get a project identifier
    a_key = a_project['Project Identifier']
    
    # Get the allocated students from the projects_dictionary
    the_students = projects_dictionary[a_key]['students']
    
    # present the list of students nicely formatted as a HTML list
    students_string = '<ul>'
    for a_student in the_students:
      student_record = students_dictionary[a_student]
      students_string += '<li>{} {} ({})\n'.format(
                                                        student_record['first_name'],
                                                        student_record['last_name'],
                                                        a_student )
    # close the list
    students_string += '</ul>\n'
    pretty_preferences[a_key] = students_string
---
# Display the preferences in table each row being:
# Project Identifier, Project Desciption, Organisation, FAN, First name, Last Name
code: |
  csv_table = ["Project Identifier,Project Description,Organisation,FAN,First Name,Last Name"]
  for a_project in current_projects_data:
    proj_key = a_project['Project Identifier']
    for a_student in projects_dictionary[proj_key]['students']:
      csv_table.append('{},{},{},{},{},{}'.format(
          proj_key, 
          a_project['Project Description'],
          a_project['Organisation'],
          a_student,
          students_dictionary[a_student]['first_name'],
          students_dictionary[a_student]['last_name']
      ))
---
# How many projects are allocated to each seminar
code: |
  seminar_allocations = {}
  for a_project in projects_dictionary:
    the_seminar = projects_dictionary[a_project]['seminar']
    if the_seminar == '':
      the_seminar = 'Not Allocated'
    try:
      seminar_allocations[the_seminar] += 1
    except KeyError:
      seminar_allocations[the_seminar] = 1
